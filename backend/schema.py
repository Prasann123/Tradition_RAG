from typing import List, Optional, Dict, Any
from pydantic import BaseModel, Field


class AgentState(BaseModel):
    """Represents the shared state of reactive agent which is built 
    to pass object between all nodes"""

    # user inputs
    query: str = Field(description="User's query or input text")
    config: Dict[str, Any] = Field(
        default_factory=dict,
        description="configuration for each run")
    
    # agent outputs
    context:List[str] = Field(default_factory=list,description="documents retrieved by RAG agent")
    web_data:List[str] = Field(default_factory=list, description="web data retrieved by web agent")
    candidate_answer: Optional[str] = Field(default=None, description="Candidate answer generated by the llm agent")

    #Supervisor and control flow
    validation_result: Optional[bool] = Field(default=None, description="decison from validation agent")
    feedback: Optional[str] = Field(default=None, description="feedback from validation agent")
    next_agent: str = Field(default="supervisor", description="next agent pointer")
    is_valid: Optional[bool] = Field(default=None, description="Result from the validation agent")
    answer_source: Optional[str] = Field(default=None, description="The agent that was the source for the answer")
    sources: List[Dict[str, Any]] = Field(default_factory=list, description="List of source documents retrieved by agents")
    # Final output
    final_answer: Optional[str] = Field(default=None, description="Final answer after validation and feedback")